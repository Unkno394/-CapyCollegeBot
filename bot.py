import logging
import traceback
from difflib import SequenceMatcher
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from g4f.client import Client as G4FClient
from telegram import InputFile

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "7297351981:AAEsCvSquNsOfeQ6n86cJMhcY_p3aASzisE"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°–û–û–ë–©–ï–ù–ò–Ø –ò –ö–õ–ê–í–ò–ê–¢–£–†–ê ---

WELCOME_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å—Ç—É–¥–µ–Ω—Ç –†–ö–°–ò! üëã

–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–æ–ª–ª–µ–¥–∂—É. –û—Ç–≤–µ—á—É –Ω–∞ –≤—Å–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.üî•

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!üöÄ
"""
MAIN_MENU = ReplyKeyboardMarkup([
    ["üöå –ü—Ä–æ–µ–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞", "üè• –ú–µ–¥–ø—É–Ω–∫—Ç"],
    ["üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üîë –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞"],
    ["üìÑ –í–æ–∑–≤—Ä–∞—Ç –∏–∑—ä—è—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "üìù –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è"],
    ["üìù –ó–∞—è–≤–ª–µ–Ω–∏–µ", "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞"],
    ["‚ùì –ü–æ–º–æ—â—å"]
], resize_keyboard=True)

BUTTON_TO_TOPIC = {
    "üöå –ü—Ä–æ–µ–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞": "–ø—Ä–æ–µ–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞",
    "üè• –ú–µ–¥–ø—É–Ω–∫—Ç": "–º–µ–¥–ø—É–Ω–∫—Ç",
    "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ": "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    "üîë –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞": "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞",
    "üìÑ –í–æ–∑–≤—Ä–∞—Ç –∏–∑—ä—è—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤": "–≤–æ–∑–≤—Ä–∞—Ç –∏–∑—ä—è—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "üìù –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è": "–æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è",
    "üìù –ó–∞—è–≤–ª–µ–Ω–∏–µ": "–∑–∞—è–≤–ª–µ–Ω–∏–µ",
    "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞": "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
    "‚ùì –ü–æ–º–æ—â—å": "–ø–æ–º–æ—â—å"
}

FIXED_RESPONSES = {
    "–º–µ–¥–ø—É–Ω–∫—Ç": {
        "answer": "üè• –ö–∞–±–∏–Ω–µ—Ç 115.\nüìç –ü–µ—Ä–≤—ã–π –∫–æ—Ä–ø—É—Å.\nüë©‚Äç‚öïÔ∏è –†–∞–π—Ñ –¢–∞—Ç—å—è–Ω–∞ –ê–¥–æ–ª—å—Ñ–æ–≤–Ω–∞.\n\nüè• –ö–∞–±–∏–Ω–µ—Ç 110.\nüìç –í—Ç–æ—Ä–æ–π –∫–æ—Ä–ø—É—Å\nüë©‚Äç‚öïÔ∏è –ò–≥–Ω–∞—Ç—å–µ–≤–∞ –ù–∞—Ç–∞–ª—å—è –ì–µ–æ—Ä–≥–∏–µ–≤–Ω–∞.",
        "keywords": ["–º–µ–¥–ø—É–Ω–∫—Ç", "–º–µ–¥–∫–∞–±–∏–Ω–µ—Ç", "–≤—Ä–∞—á", "—Ä–∞–π—Ñ", "—Ç–∞—Ç—å—è–Ω–∞", "–∞–ø—Ç–µ—á–∫–∞", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π", "–±–æ–ª—å–Ω–∏—Ü–∞", "–¥–æ–∫—Ç–æ—Ä"]
    },
    "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": {
        "answer": "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n‚Ä¢ @turtle_rksi_bot\n‚Ä¢ @RKSIplanshetkabot",
        "keywords": ["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ø–∞—Ä—ã", "–≥—Ä–∞—Ñ–∏–∫", "–∑–∞–Ω—è—Ç–∏—è", "—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω"]
    },
    "–ø—Ä–æ–µ–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞": {
        "answer": "üìå –ì–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–µ–∑–¥–Ω—É—é –∫–∞—Ä—Ç—É?\nüìç –ö–∞—Ä—Ç—É –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ —É–ª–∏—Ü–µ –•–∞–ª—Ç—É—Ä–∏–Ω—Å–∫–∏–π 28.\n\nüìù –ß—Ç–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π?\n‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç üìÑ\n‚Ä¢ –°–ø—Ä–∞–≤–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è –æ–±—É—á–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–¥–∂–µ üéì\n(–û—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –≤ 1 –∫–æ—Ä–ø—É—Å–µ, –∫–∞–±. 120 ‚Äî –û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤.\n–ó–∞–≤–µ–¥—É—é—â–∞—è: –ò—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞)\n‚Ä¢ 90 —Ä—É–±–ª–µ–π üí∞\n\n–° —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏ —Å—Ç–∞–Ω—É—Ç –≤ 2 —Ä–∞–∑–∞ –¥–µ—à–µ–≤–ª–µ! üëê –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∫–∞—Ä—Ç–∞ –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è ‚Äì –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! üòä –ï—ë –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –∏ –≤—Å–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–π–¥—É—Ç –Ω–∞ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É",
        "keywords": ["–ø—Ä–æ–µ–∑–¥–Ω–∞—è", "–ø—Ä–æ–µ–∑–¥–Ω–æ–π", "–∫–∞—Ä—Ç–∞", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è", "–º–µ—Ç—Ä–æ", "–∞–≤—Ç–æ–±—É—Å"]
    },
    "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞": {
        "answer": "üîê –®–∞–≥–∏:\n1. –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ ‚Äî –∫–∞–±. 118–∞\n2. –û–ø–ª–∞—Ç–∏—Ç—å 300‚ÇΩ (—Å–∫–∞—á–∞—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é: <a href='https://rksi.ru/doc/college/cartlost.pdf'>—Ç—É—Ç</a>)\n3. –ß–µ–∫ ‚Äî –≤ 118–∞\n4. –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ 1-3 –¥–Ω—è\n\n‚ö† –í—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–¥–∞—é—Ç –±—É–º–∞–∂–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫.",
        "keywords": ["–ø—Ä–æ–ø—É—Å–∫", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "–ø–æ—Ç–µ—Ä—è–ª", "–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π", "—Å–ª–æ–º–∞–ª–∞—Å—å"]
    },
    "–≤–æ–∑–≤—Ä–∞—Ç –∏–∑—ä—è—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤": {
        "answer": "üî¥ <b>–ü—Ä–∏—á–∏–Ω—ã –∏–∑—ä—è—Ç–∏—è:</b>\n‚ñ∏ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–º–µ–Ω–Ω–æ–π –æ–±—É–≤–∏ üëûüö´\n‚ñ∏ –ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞ üÜî‚ùå\n\nüü¢<b> –ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?</b>\n1. –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑—ä—è—Ç –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–º–µ–Ω–∫–∏:\n‚ñ∏ –ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏ —Å–¥–∞–π—Ç–µ –µ—ë –≤ –∫–∞–±. 219\n2. –ï—Å–ª–∏ –∏–∑—ä—è–ª–∏ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–≥–æ:\n‚ñ∏ –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π –∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç 118–∞\n\n‚ö° –õ–∞–π—Ñ—Ö–∞–∫:\n–í—Å–µ–≥–¥–∞ –Ω–æ—Å–∏—Ç–µ —Å–º–µ–Ω–∫—É –∏ –Ω–µ —Ç–µ—Ä—è–π—Ç–µ –ø—Ä–æ–ø—É—Å–∫ ‚Äî —ç—Ç–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç –≤–∞—à–µ –≤—Ä–µ–º—è! ‚è≥",
        "keywords": ["–¥–æ–∫—É–º–µ–Ω—Ç—ã", "–∏–∑—ä—è–ª–∏", "–≤–µ—Ä–Ω—É—Ç—å", "–ø—Ä–æ–ø—É—Å–∫", "–∑–∞–±—Ä–∞–ª–∏"]
    },
    "–æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è": {
        "answer": "üìù <b>–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é:</b>\n1. –£–∫–∞–∂–∏—Ç–µ –§–ò–û, –≥—Ä—É–ø–ø—É –∏ –¥–∞—Ç—É.\n2. –û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É.\n3. –ü–æ–¥–ø–∏—Å—å –∏ –¥–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.",
        "keywords": ["–æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è", "–æ–ø–æ–∑–¥–∞–Ω–∏–µ", "–ø—Ä–æ–ø—É—Å–∫", "–æ—Ñ–æ—Ä–º–∏—Ç—å –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é"],
        "photo": "static/photo1.jpg"  
    },
    "–∑–∞—è–≤–ª–µ–Ω–∏–µ": {
        "answer": "üìù <b>–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ:</b>\n1. –£–∫–∞–∂–∏—Ç–µ –§–ò–û, –≥—Ä—É–ø–ø—É –∏ –¥–∞—Ç—É.\n2. –û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ.\n3. –ü–æ–¥–ø–∏—à–∏—Ç–µ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∞—Ç—É.",
        "keywords": ["–∑–∞—è–≤–ª–µ–Ω–∏–µ", "–Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–ø—Ä–∏–º–µ—Ä –∑–∞—è–≤–ª–µ–Ω–∏—è"],
        "photo": "static/photo2.jpg"  
    },
    "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞":{
        "answer": "üìö–ê—É–¥. 215, 1 –∫–æ—Ä–ø—É—Å\nüë©‚Äçüíº –ó–∞–≤–µ–¥—É—é—â–∞—è:\n–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞ –ö—Ä–∏–≤–æ—à–µ–µ–≤–∞\nüïí–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî —Å—É–±–±–æ—Ç–∞, 8:30 ‚Äî 17:00.",
        "keywords": []
    },
    "–ø–æ–º–æ—â—å": {
        "answer": "üìå –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é üëá",
        "keywords": []
    }
}

class QuestionAnalyzer:
    def __init__(self):
        try:
            self.client = G4FClient()
            self.neuro_enabled = True
        except Exception as e:
            logger.warning(f"–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            self.neuro_enabled = False

    def similar(self, a: str, b: str) -> float:
        return SequenceMatcher(None, a.lower(), b.lower()).ratio()

    def find_best_match(self, text: str, keywords: list) -> tuple:
        text = text.lower()
        best_match = None
        highest_score = 0

        for keyword in keywords:
            if keyword in text:
                return keyword, 1.0
            for word in text.split():
                score = self.similar(word, keyword)
                if score > 0.6 and score > highest_score:
                    highest_score = score
                    best_match = keyword
        return best_match, highest_score

    async def analyze_with_neuro(self, text: str) -> str:
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—É: 1-–ú–µ–¥–ø—É–Ω–∫—Ç, 2-–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, 3-–ü—Ä–æ–µ–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞, 4-–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞, 5-–î—Ä—É–≥–æ–µ. –û—Ç–≤–µ—Ç—å —Ü–∏—Ñ—Ä–æ–π."},
                    {"role": "user", "content": text}
                ],
                timeout=10
            )
            result = response.choices[0].message.content.strip()
            return {
                "1": "–º–µ–¥–ø—É–Ω–∫—Ç",
                "2": "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                "3": "–ø—Ä–æ–µ–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞",
                "4": "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞"
            }.get(result, "–ø–æ–º–æ—â—å")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
            return None

    async def detect_topic(self, text: str) -> str:
        if text in BUTTON_TO_TOPIC:
            return BUTTON_TO_TOPIC[text]

        for topic, data in FIXED_RESPONSES.items():
            _, score = self.find_best_match(text, data["keywords"])
            if score > 0.6:
                return topic

        if self.neuro_enabled:
            neuro_topic = await self.analyze_with_neuro(text)
            if neuro_topic:
                return neuro_topic

        return "–ø–æ–º–æ—â—å"

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=MAIN_MENU)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    logger.info(f"–í–æ–ø—Ä–æ—Å: {user_text}")

    try:
        analyzer = QuestionAnalyzer()
        topic = await analyzer.detect_topic(user_text)
        logger.info(f"–¢–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {topic}")

        if topic in FIXED_RESPONSES:
            data = FIXED_RESPONSES[topic]

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if "photo" in data:
                with open(data["photo"], "rb") as photo_file:
                    await update.message.reply_photo(
                        photo=InputFile(photo_file),
                        caption=data["answer"],
                        parse_mode="HTML",
                        reply_markup=MAIN_MENU
                    )
            else:
                await update.message.reply_text(
                    data["answer"],
                    parse_mode="HTML",
                    reply_markup=MAIN_MENU
                )
        else:
            await update.message.reply_text(
                "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é üëá",
                reply_markup=MAIN_MENU
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        traceback.print_exc()
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=MAIN_MENU
        )

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()

if __name__ == "__main__":
    main()