from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from g4f.client import Client as G4FClient
import logging
import re
from difflib import SequenceMatcher

TOKEN = "7297351981:AAEsCvSquNsOfeQ6n86cJMhcY_p3aASzisE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
FIXED_RESPONSES = {
    "–º–µ–¥–ø—É–Ω–∫—Ç": {
        "answer": "–ö–∞–±–∏–Ω–µ—Ç 115. –ó–∞–≤–µ–¥—É—é—â–∞—è ‚Äî –†–∞–π—Ñ –¢–∞—Ç—å—è–Ω–∞ –ê–¥–æ–ª—å—Ñ–æ–≤–Ω–∞ (–ø–µ—Ä–≤—ã–π –∫–æ—Ä–ø—É—Å).\n–ö–∞–±–∏–Ω–µ—Ç 110. –ó–∞–≤–µ–¥—É—é—â–∞—è –º–µ–¥–ø—É–Ω–∫—Ç–æ–º ‚Äî –ò–≥–Ω–∞—Ç—å–µ–≤–∞ –ù–∞—Ç–∞–ª—å—è –ì–µ–æ—Ä–≥–∏–µ–≤–Ω–∞ (–≤—Ç–æ—Ä–æ–π –∫–æ—Ä–ø—É—Å).",
        "keywords": ["–º–µ–¥–ø—É–Ω–∫—Ç", "–º–µ–¥–∫–∞–±–∏–Ω–µ—Ç", "–≤—Ä–∞—á", "—Ä–∞–π—Ñ", "—Ç–∞—Ç—å—è–Ω–∞", "–∞–ø—Ç–µ—á–∫–∞", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π", "–±–æ–ª—å–Ω–∏—Ü–∞", "–¥–æ–∫—Ç–æ—Ä"]
    },
    "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": {
        "answer": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: @turtle_rksi_bot –∏–ª–∏ @RKSIplanshetkabot",
        "keywords": ["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ø–∞—Ä—ã", "–≥—Ä–∞—Ñ–∏–∫", "–∑–∞–Ω—è—Ç–∏—è", "–∫–æ–≥–¥–∞ —É—á–∏–º—Å—è", "—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω"]
    }
}

DEFAULT_ANSWER = "–£—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —É –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –∫–æ–ª–ª–µ–¥–∂–∞."
WELCOME_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å—Ç—É–¥–µ–Ω—Ç –†–ö–°–ò! üëã

–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–æ–ª–ª–µ–¥–∂—É. –ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å:
‚Ä¢ –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–¥–ø—É–Ω–∫—Ç üè•
‚Ä¢ –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!

P.S. –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–æ–ª–ª–µ–¥–∂ - —ç—Ç–æ —Å–≤—è—Ç–æ–µ, –∞ –ø–∞—Ä—ã –ª—É—á—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å üòâ
"""

class QuestionAnalyzer:
    def __init__(self):
        try:
            self.client = G4FClient()
            self.neuro_enabled = True
        except:
            logger.warning("–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            self.neuro_enabled = False
    
    def similar(self, a: str, b: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å —Å—Ç—Ä–æ–∫ (0-1)"""
        return SequenceMatcher(None, a, b).ratio()
    
    def find_best_match(self, text: str, keywords: list) -> tuple:
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"""
        text = text.lower()
        best_match = None
        highest_score = 0
        
        for keyword in keywords:
            # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
            if keyword in text:
                return keyword, 1.0
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞
            words = text.split()
            for word in words:
                score = self.similar(word, keyword)
                if score > 0.7 and score > highest_score:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
                    highest_score = score
                    best_match = keyword
        
        return best_match, highest_score
    
    async def detect_topic(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        for topic, data in FIXED_RESPONSES.items():
            match, score = self.find_best_match(text, data["keywords"])
            if score > 0.75:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {topic} (—Å—Ö–æ–∂–µ—Å—Ç—å: {score:.2f})")
                return topic
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –Ω–µ–µ
        if self.neuro_enabled:
            try:
                response = self.client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{
                        "role": "system",
                        "content": "–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞:\n"
                                  "1. –ú–µ–¥–ø—É–Ω–∫—Ç\n2. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n3. –î—Ä—É–≥–æ–µ\n"
                                  "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–π."
                    }, {
                        "role": "user", 
                        "content": f"–í–æ–ø—Ä–æ—Å: '{text}'\n–û—Ç–≤–µ—Ç:"
                    }],
                    timeout=10
                )
                result = response.choices[0].message.content.strip()
                
                return {
                    "1": "–º–µ–¥–ø—É–Ω–∫—Ç",
                    "2": "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
                }.get(result, "–¥—Ä—É–≥–æ–µ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {str(e)}")
        
        return "–¥—Ä—É–≥–æ–µ"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(WELCOME_MESSAGE)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {user_text}")
    
    analyzer = QuestionAnalyzer()
    topic = await analyzer.detect_topic(user_text)
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞: {topic}")
    
    if topic in FIXED_RESPONSES:
        await update.message.reply_text(FIXED_RESPONSES[topic]["answer"])
    else:
        await update.message.reply_text(DEFAULT_ANSWER)

def main():
    app = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    app.run_polling()

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    main()

    






    