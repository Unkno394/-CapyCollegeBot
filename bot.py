from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from g4f.client import Client as G4FClient
import logging
from difflib import SequenceMatcher

TOKEN = "7297351981:AAEsCvSquNsOfeQ6n86cJMhcY_p3aASzisE"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

FIXED_RESPONSES = {
    "–º–µ–¥–ø—É–Ω–∫—Ç": {
        "answer": "üè• –ö–∞–±–∏–Ω–µ—Ç 115.\nüìç –ü–µ—Ä–≤—ã–π –∫–æ—Ä–ø—É—Å.\nüë©‚Äç‚öïÔ∏è –ó–∞–≤–µ–¥—É—é—â–∞—è ‚Äî –†–∞–π—Ñ –¢–∞—Ç—å—è–Ω–∞ –ê–¥–æ–ª—å—Ñ–æ–≤–Ω–∞.\n\nüè• –ö–∞–±–∏–Ω–µ—Ç 110.\nüìç –í—Ç–æ—Ä–æ–π –∫–æ—Ä–ø—É—Å\nüë©‚Äç‚öïÔ∏è –ó–∞–≤–µ–¥—É—é—â–∞—è –º–µ–¥–ø—É–Ω–∫—Ç–æ–º ‚Äî –ò–≥–Ω–∞—Ç—å–µ–≤–∞ –ù–∞—Ç–∞–ª—å—è –ì–µ–æ—Ä–≥–∏–µ–≤–Ω–∞.",
        "keywords": ["–º–µ–¥–ø—É–Ω–∫—Ç", "–º–µ–¥–∫–∞–±–∏–Ω–µ—Ç", "–≤—Ä–∞—á", "—Ä–∞–π—Ñ", "—Ç–∞—Ç—å—è–Ω–∞", "–∞–ø—Ç–µ—á–∫–∞", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π", "–±–æ–ª—å–Ω–∏—Ü–∞", "–¥–æ–∫—Ç–æ—Ä"]
    },
    "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": {
        "answer": "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n‚Ä¢ @turtle_rksi_bot\n‚Ä¢ @RKSIplanshetkabot",
        "keywords": ["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ø–∞—Ä—ã", "–≥—Ä–∞—Ñ–∏–∫", "–∑–∞–Ω—è—Ç–∏—è", "–∫–æ–≥–¥–∞ —É—á–∏–º—Å—è", "—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω"]
    },
    "–ø—Ä–æ–µ–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞": {
        "answer": "üìå –ì–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–µ–∑–¥–Ω—É—é –∫–∞—Ä—Ç—É?\nüìç –ö–∞—Ä—Ç—É –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ —É–ª–∏—Ü–µ –•–∞–ª—Ç—É—Ä–∏–Ω—Å–∫–∏–π 28.\n\nüìù –ß—Ç–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π?\n‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç üìÑ\n‚Ä¢ –°–ø—Ä–∞–≤–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è –æ–±—É—á–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–¥–∂–µ üéì\n(–û—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –≤ 1 –∫–æ—Ä–ø—É—Å–µ, –∫–∞–±. 120 ‚Äî –û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤.\n–ó–∞–≤–µ–¥—É—é—â–∞—è: –ò—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞)\n‚Ä¢ 90 —Ä—É–±–ª–µ–π üí∞\n\n–° —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏ —Å—Ç–∞–Ω—É—Ç –≤ 2 —Ä–∞–∑–∞ –¥–µ—à–µ–≤–ª–µ! üëê –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∫–∞—Ä—Ç–∞ –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è ‚Äì –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! üòä –ï—ë –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –∏ –≤—Å–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–π–¥—É—Ç –Ω–∞ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.",
        "keywords": ["–ø—Ä–æ–µ–∑–¥–Ω–∞—è", "–ø—Ä–æ–µ–∑–¥–Ω–æ–π", "–∫–∞—Ä—Ç–∞", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è", "–æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–µ–∑–¥–Ω–æ–π", "–º–µ—Ç—Ä–æ", "–∞–≤—Ç–æ–±—É—Å", "–≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É"]
    }
}

MAIN_MENU = ReplyKeyboardMarkup([
    ["üöå –ü—Ä–æ–µ–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞", "üè• –ú–µ–¥–ø—É–Ω–∫—Ç"],
    ["üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ","‚ùì –ü–æ–º–æ—â—å"]
], resize_keyboard=True)

WELCOME_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å—Ç—É–¥–µ–Ω—Ç –†–ö–°–ò! üëã

–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–æ–ª–ª–µ–¥–∂—É. –ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å:
‚Ä¢ –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–¥–ø—É–Ω–∫—Ç üè•
‚Ä¢ –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ
‚Ä¢ –ì–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–µ–∑–¥–Ω—É—é –∫–∞—Ä—Ç—É üöå
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!

P.S. –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–æ–ª–ª–µ–¥–∂ - —ç—Ç–æ —Å–≤—è—Ç–æ–µ, –∞ –ø–∞—Ä—ã –ª—É—á—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å üòâ
"""

class QuestionAnalyzer:
    def __init__(self):
        try:
            self.client = G4FClient()
            self.neuro_enabled = True
            logger.info("–ù–µ–π—Ä–æ—Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.warning(f"–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –û—à–∏–±–∫–∞: {str(e)}. –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            self.neuro_enabled = False
    
    def similar(self, a: str, b: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å —Å—Ç—Ä–æ–∫ (0-1) —Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫"""
        return SequenceMatcher(None, a.lower(), b.lower()).ratio()
    
    def find_best_match(self, text: str, keywords: list) -> tuple:
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"""
        text = text.lower()
        best_match = None
        highest_score = 0
        
        for keyword in keywords:
            if keyword in text:
                return keyword, 1.0
            words = text.split()
            for word in words:
                score = self.similar(word, keyword)
                if score > 0.6 and score > highest_score:
                    highest_score = score
                    best_match = keyword
        
        return best_match, highest_score
    
    async def analyze_with_neuro(self, text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{
                    "role": "system",
                    "content": "–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞:\n"
                              "1. –ú–µ–¥–ø—É–Ω–∫—Ç\n2. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n3. –ü—Ä–æ–µ–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞\n4. –î—Ä—É–≥–æ–µ\n"
                              "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–π."
                }, {
                    "role": "user", 
                    "content": f"–í–æ–ø—Ä–æ—Å: '{text}'\n–û—Ç–≤–µ—Ç:"
                }],
                timeout=10
            )
            result = response.choices[0].message.content.strip()
            
            return {
                "1": "–º–µ–¥–ø—É–Ω–∫—Ç",
                "2": "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                "3": "–ø—Ä–æ–µ–∑–¥–Ω–∞—è –∫–∞—Ä—Ç–∞"
            }.get(result, "–ø–æ–º–æ—â—å")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {str(e)}")
            return None
    
    async def detect_topic(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫"""
        text_lower = text.lower()

        for topic, data in FIXED_RESPONSES.items():
            match, score = self.find_best_match(text, data["keywords"])
            if score > 0.6:  
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {topic} (—Å—Ö–æ–∂–µ—Å—Ç—å: {score:.2f})")
                return topic
        if self.neuro_enabled:
            neuro_topic = await self.analyze_with_neuro(text)
            if neuro_topic:
                return neuro_topic
        
        return "–ø–æ–º–æ—â—å"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        WELCOME_MESSAGE,
        reply_markup=MAIN_MENU
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {user_text}")
    
    try:
        analyzer = QuestionAnalyzer()
        topic = await analyzer.detect_topic(user_text)
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞: {topic}")
        
        if topic in FIXED_RESPONSES:
            await update.message.reply_text(
                FIXED_RESPONSES[topic]["answer"],
                reply_markup=MAIN_MENU
            )
        else:
            await update.message.reply_text(
                "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
                reply_markup=MAIN_MENU
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=MAIN_MENU
        )

def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
    